{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"dmenv: the stupid virtualenv manager for Python \u00b6 What it does \u00b6 dmenv takes care of: Creating virtualenvs for you: one virtualenv per project and Python version, thus enforcing some commonly agreed-upon best practices Generating a lock file that contains all the versions of all your dependencies at a given time, so you can have reproducible builds If does it by: reading information about your project in the setup.py file and nothing else using already existing tools such as python3 -m venv and pip As the name implies, its implementation is as simple as possible and it contains the bare minimum amount of features. Want to try it? Proceed to installation and usage .","title":"Home"},{"location":"#dmenv_the_stupid_virtualenv_manager_for_python","text":"","title":"dmenv: the stupid virtualenv manager for Python"},{"location":"#what_it_does","text":"dmenv takes care of: Creating virtualenvs for you: one virtualenv per project and Python version, thus enforcing some commonly agreed-upon best practices Generating a lock file that contains all the versions of all your dependencies at a given time, so you can have reproducible builds If does it by: reading information about your project in the setup.py file and nothing else using already existing tools such as python3 -m venv and pip As the name implies, its implementation is as simple as possible and it contains the bare minimum amount of features. Want to try it? Proceed to installation and usage .","title":"What it does"},{"location":"changelog/","text":"0.9.0 \u00b6 Fix #54 : rename --cwd option to --project . Avoid blindly overwriting the requirements.lock file when running. dmenv lock . See #11 and #7 for background. 0.8.4 \u00b6 Fix #49 : return code was always 0 when using dmenv run on Windows. (regression introduced in 0.8.1 ). 0.8.3 \u00b6 Add documentation link to Cargo.toml . 0.8.2 \u00b6 Fix #45 : dmenv env can be used with non-ASCII chars on Windows. 0.8.1 \u00b6 dmenv run now uses execv from libc . This means the child process is killed when killing dmenv . The previous behavior (starting a new subprocess) can be activated with the --no-exec option. 0.8.0 \u00b6 Allow using python3 -m virtualenv instead of python3 -m venv to create the virtual environments by setting an environment variable named DMENV_NO_VENV_STDLIB . This can be used to work around some bugs in Debian-based distributions. 0.7.0 \u00b6 Add bump-in-lock command. Use to bump version or git references in the requirements.lock file. 0.6.0 \u00b6 Run setup.py develop with --no-deps . Rename show to show:venv_path , add show:deps to display the list of dependencies. 0.5.0 \u00b6 dmenv init : since name is required, it is now an argument, no longer an option. So instead of dmenv init --name foo --version 0.42 , use dmenv init foo --version 0.42 Add a command named dmenv develop that just runs python setup.py develop and nothing else. dmenv install : add --no-upgrade-pip and --no-develop options. 0.4.3 \u00b6 Add a --author option to dmenv init , used when generating the setup.py file. Fix #12 : dmenv lock now exits immediately if the lock file is missing. Workaround Debian bug in pip (See #15 for details). 0.4.2 \u00b6 Write some metadata inside the requirements.lock file. Improve dmenv run : Suggest running lock or install Do not crash if used without arguments 0.4.1 \u00b6 Fix CI on Windows. 0.4.0 \u00b6 dmenv no longer needs a configuration file. Find the Python interpreter to use by looking in the PATH environment variable. 0.3.4 \u00b6 Fix #9 : If dmenv is run inside an existing virtualenv , just use it. 0.3.3 \u00b6 Also upgrade pip when running dmenv install . Fix incorrect message when running dmenv lock . 0.3.2 \u00b6 Fix regression introduced in 0.3.1: create config path parent subdirectory before trying to write inside it. 0.3.1 \u00b6 Add a dmenv subdirectory to the configuration file path. 0.3.0 \u00b6 Replace command freeze by lock . 0.2.3 \u00b6 Add command dmenv init to generate a working setup.py file. 0.2.2 \u00b6 Fix running dmenv on Windows. The configuration file is now read from $HOME ( ~/.config on Linux and macOS, %HOME%\\AppData\\Local on Windows). 0.2.1 \u00b6 The .dmenv.toml file is now required. 0.2.0 \u00b6 Can be used with multiple python versions, using the .dmenv.toml config file. 0.1.0 \u00b6 Initial release.","title":"Changelog"},{"location":"changelog/#090","text":"Fix #54 : rename --cwd option to --project . Avoid blindly overwriting the requirements.lock file when running. dmenv lock . See #11 and #7 for background.","title":"0.9.0"},{"location":"changelog/#084","text":"Fix #49 : return code was always 0 when using dmenv run on Windows. (regression introduced in 0.8.1 ).","title":"0.8.4"},{"location":"changelog/#083","text":"Add documentation link to Cargo.toml .","title":"0.8.3"},{"location":"changelog/#082","text":"Fix #45 : dmenv env can be used with non-ASCII chars on Windows.","title":"0.8.2"},{"location":"changelog/#081","text":"dmenv run now uses execv from libc . This means the child process is killed when killing dmenv . The previous behavior (starting a new subprocess) can be activated with the --no-exec option.","title":"0.8.1"},{"location":"changelog/#080","text":"Allow using python3 -m virtualenv instead of python3 -m venv to create the virtual environments by setting an environment variable named DMENV_NO_VENV_STDLIB . This can be used to work around some bugs in Debian-based distributions.","title":"0.8.0"},{"location":"changelog/#070","text":"Add bump-in-lock command. Use to bump version or git references in the requirements.lock file.","title":"0.7.0"},{"location":"changelog/#060","text":"Run setup.py develop with --no-deps . Rename show to show:venv_path , add show:deps to display the list of dependencies.","title":"0.6.0"},{"location":"changelog/#050","text":"dmenv init : since name is required, it is now an argument, no longer an option. So instead of dmenv init --name foo --version 0.42 , use dmenv init foo --version 0.42 Add a command named dmenv develop that just runs python setup.py develop and nothing else. dmenv install : add --no-upgrade-pip and --no-develop options.","title":"0.5.0"},{"location":"changelog/#043","text":"Add a --author option to dmenv init , used when generating the setup.py file. Fix #12 : dmenv lock now exits immediately if the lock file is missing. Workaround Debian bug in pip (See #15 for details).","title":"0.4.3"},{"location":"changelog/#042","text":"Write some metadata inside the requirements.lock file. Improve dmenv run : Suggest running lock or install Do not crash if used without arguments","title":"0.4.2"},{"location":"changelog/#041","text":"Fix CI on Windows.","title":"0.4.1"},{"location":"changelog/#040","text":"dmenv no longer needs a configuration file. Find the Python interpreter to use by looking in the PATH environment variable.","title":"0.4.0"},{"location":"changelog/#034","text":"Fix #9 : If dmenv is run inside an existing virtualenv , just use it.","title":"0.3.4"},{"location":"changelog/#033","text":"Also upgrade pip when running dmenv install . Fix incorrect message when running dmenv lock .","title":"0.3.3"},{"location":"changelog/#032","text":"Fix regression introduced in 0.3.1: create config path parent subdirectory before trying to write inside it.","title":"0.3.2"},{"location":"changelog/#031","text":"Add a dmenv subdirectory to the configuration file path.","title":"0.3.1"},{"location":"changelog/#030","text":"Replace command freeze by lock .","title":"0.3.0"},{"location":"changelog/#023","text":"Add command dmenv init to generate a working setup.py file.","title":"0.2.3"},{"location":"changelog/#022","text":"Fix running dmenv on Windows. The configuration file is now read from $HOME ( ~/.config on Linux and macOS, %HOME%\\AppData\\Local on Windows).","title":"0.2.2"},{"location":"changelog/#021","text":"The .dmenv.toml file is now required.","title":"0.2.1"},{"location":"changelog/#020","text":"Can be used with multiple python versions, using the .dmenv.toml config file.","title":"0.2.0"},{"location":"changelog/#010","text":"Initial release.","title":"0.1.0"},{"location":"faq/","text":"FAQ \u00b6 I'm on Debian, and I've got errors when running bdist_wheel \u00b6 This is an upstream bug . As a workaround, you can install virtualenv with python3 -m pip install virtualenv --user and then set the DMENV_NO_VENV_STDLIB environment variable. How do I upgrade dependencies? \u00b6 Two solutions: Patch the requirements.lock directly; Or run dmenv clean && dmenv lock again. If something breaks, either fix your code or use more precise version specifiers in setup.py , like foobar < 2.0 . How do I depend on a git specific repo/branch? \u00b6 Edit the requirements.lock by hand like this, where the part after #egg= matches the name of the dependency in the setup.py https://gitlab.com/foo/bar@my-branch#egg=bar Note that the change will be lost if you re-run dmenv lock : see #7 for details. We are looking for a proper solution. In the mean time, feel free to: Open a pull request if you've forked an upstream project Use a local pipy mirror and a little bit of CI to publish your sources there How do I use an other Python interpreter? \u00b6 You can either: modify your PATH environment variable so that it appears there. (For instance, with pyenv ). or prefix all the dmenv commands with --python /path/to/other/python . Why Rust? \u00b6 Because it has excellent support for what we need: manipulate paths and run commands in a cross-platform way Because it's my second favorite language Because distribution is really easy Because by not using Python at all dmenv is less likely to break if something on your system changes.","title":"FAQ"},{"location":"faq/#faq","text":"","title":"FAQ"},{"location":"faq/#im_on_debian_and_ive_got_errors_when_running_bdist_wheel","text":"This is an upstream bug . As a workaround, you can install virtualenv with python3 -m pip install virtualenv --user and then set the DMENV_NO_VENV_STDLIB environment variable.","title":"I'm on Debian, and I've got errors when running bdist_wheel"},{"location":"faq/#how_do_i_upgrade_dependencies","text":"Two solutions: Patch the requirements.lock directly; Or run dmenv clean && dmenv lock again. If something breaks, either fix your code or use more precise version specifiers in setup.py , like foobar < 2.0 .","title":"How do I upgrade dependencies?"},{"location":"faq/#how_do_i_depend_on_a_git_specific_repobranch","text":"Edit the requirements.lock by hand like this, where the part after #egg= matches the name of the dependency in the setup.py https://gitlab.com/foo/bar@my-branch#egg=bar Note that the change will be lost if you re-run dmenv lock : see #7 for details. We are looking for a proper solution. In the mean time, feel free to: Open a pull request if you've forked an upstream project Use a local pipy mirror and a little bit of CI to publish your sources there","title":"How do I depend on a git specific repo/branch?"},{"location":"faq/#how_do_i_use_an_other_python_interpreter","text":"You can either: modify your PATH environment variable so that it appears there. (For instance, with pyenv ). or prefix all the dmenv commands with --python /path/to/other/python .","title":"How do I use an other Python interpreter?"},{"location":"faq/#why_rust","text":"Because it has excellent support for what we need: manipulate paths and run commands in a cross-platform way Because it's my second favorite language Because distribution is really easy Because by not using Python at all dmenv is less likely to break if something on your system changes.","title":"Why Rust?"},{"location":"installation/","text":"Installing dmenv \u00b6 Using the pre-compiled binaries \u00b6 The easiest way is to download the matching binary from the releases page for your platform and put it somewhere on in your $PATH. Linux, macOS \u00b6 cd ~/.local/bin curl --fail -L https://github.com/TankerHQ/dmenv/releases/download/v0.9.0/dmenv-<platform> -o dmenv chmod u+x dmenv Note: replace <platform> by your current platform: linux , or osx . Windows \u00b6 Download the dmenv-windows.exe from the release page and save it for instance in c:\\path\\to\\python\\Scripts\\dmenv.exe . (This folder should already be in you PATH if you used the default settings when installing Python). Installing from source \u00b6 If you prefer, you can also install rust and install dmenv with cargo install dmenv .","title":"Installation"},{"location":"installation/#installing_dmenv","text":"","title":"Installing dmenv"},{"location":"installation/#using_the_pre-compiled_binaries","text":"The easiest way is to download the matching binary from the releases page for your platform and put it somewhere on in your $PATH.","title":"Using the pre-compiled binaries"},{"location":"installation/#linux_macos","text":"cd ~/.local/bin curl --fail -L https://github.com/TankerHQ/dmenv/releases/download/v0.9.0/dmenv-<platform> -o dmenv chmod u+x dmenv Note: replace <platform> by your current platform: linux , or osx .","title":"Linux, macOS"},{"location":"installation/#windows","text":"Download the dmenv-windows.exe from the release page and save it for instance in c:\\path\\to\\python\\Scripts\\dmenv.exe . (This folder should already be in you PATH if you used the default settings when installing Python).","title":"Windows"},{"location":"installation/#installing_from_source","text":"If you prefer, you can also install rust and install dmenv with cargo install dmenv .","title":"Installing from source"},{"location":"usage/","text":"Usage \u00b6 Setup \u00b6 First, dmenv needs a Python3 interpreter in PATH, which should be called python or python3 . This should already be the case if you've just installed Python3, regardless of your operating system. Second, dmenv needs a setup.py file to work. If you don't have a setup.py yet, you can run dmenv init <project name> to generate one. In this case, make sure to read the comments inside and edit it to fit your needs. If you already have one, please note that dmenv uses the extras_require keyword with a dev key to specify development dependencies, which you can use to replace your dev-requirements.txt file for instance. And that's it. Now you are ready to use dmenv ! Here's a description of the main commands: dmenv lock \u00b6 Here's what dmenv lock does: First, it creates a virtualenv for you with python -m venv in .venv/<version> , where <version> is read from python --version . Make sure to add .venv to your .gitignore ! Note that this step is skipped if dmenv detects it is run from an existing virtualenv. Then it runs pip intall --editable .[dev] so that your dev deps are installed, and the scripts listed in entry_points are created. Finally, it runs pip freeze to generate a requirements.lock file. Now you can add the requirements.lock file to your version control system. This leads us to the next command. dmenv install \u00b6 Now that the complete list of dependencies and their versions is written in the requirements.lock file, anyone can run dmenv install to install all the dependencies and get exactly the same versions you got when you ran dmenv lock . Hooray reproducible builds! dmenv run \u00b6 As a convenience, you can use: dmenv run to run any binary from the virtualenv. If the program you want to run needs command-line options, use a -- separator, like so: dmenv run -- pytest --collect-only dmenv upgrade-pip \u00b6 Tired of pip telling you to upgrade itself? Run dmenv upgrade-pip :) It's exactly the same as typing dmenv run -- python -m pip install --upgrade pip , but with less keystrokes :P dmenv show:venv_path \u00b6 Useful to activate the virtualenv for your current shell. For instance: source \"$(dmenv show:venv_path)/bin/activate\" dmenv show:deps \u00b6 Just a wrapper for pip list : $ dmenv show:deps Package Version ------------------ ------- atomicwrites 1.2.1 attrs 18.2.0 importlib-metadata 0.6 ...","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#setup","text":"First, dmenv needs a Python3 interpreter in PATH, which should be called python or python3 . This should already be the case if you've just installed Python3, regardless of your operating system. Second, dmenv needs a setup.py file to work. If you don't have a setup.py yet, you can run dmenv init <project name> to generate one. In this case, make sure to read the comments inside and edit it to fit your needs. If you already have one, please note that dmenv uses the extras_require keyword with a dev key to specify development dependencies, which you can use to replace your dev-requirements.txt file for instance. And that's it. Now you are ready to use dmenv ! Here's a description of the main commands:","title":"Setup"},{"location":"usage/#dmenv_lock","text":"Here's what dmenv lock does: First, it creates a virtualenv for you with python -m venv in .venv/<version> , where <version> is read from python --version . Make sure to add .venv to your .gitignore ! Note that this step is skipped if dmenv detects it is run from an existing virtualenv. Then it runs pip intall --editable .[dev] so that your dev deps are installed, and the scripts listed in entry_points are created. Finally, it runs pip freeze to generate a requirements.lock file. Now you can add the requirements.lock file to your version control system. This leads us to the next command.","title":"dmenv lock"},{"location":"usage/#dmenv_install","text":"Now that the complete list of dependencies and their versions is written in the requirements.lock file, anyone can run dmenv install to install all the dependencies and get exactly the same versions you got when you ran dmenv lock . Hooray reproducible builds!","title":"dmenv install"},{"location":"usage/#dmenv_run","text":"As a convenience, you can use: dmenv run to run any binary from the virtualenv. If the program you want to run needs command-line options, use a -- separator, like so: dmenv run -- pytest --collect-only","title":"dmenv run"},{"location":"usage/#dmenv_upgrade-pip","text":"Tired of pip telling you to upgrade itself? Run dmenv upgrade-pip :) It's exactly the same as typing dmenv run -- python -m pip install --upgrade pip , but with less keystrokes :P","title":"dmenv upgrade-pip"},{"location":"usage/#dmenv_showvenv_path","text":"Useful to activate the virtualenv for your current shell. For instance: source \"$(dmenv show:venv_path)/bin/activate\"","title":"dmenv show:venv_path"},{"location":"usage/#dmenv_showdeps","text":"Just a wrapper for pip list : $ dmenv show:deps Package Version ------------------ ------- atomicwrites 1.2.1 attrs 18.2.0 importlib-metadata 0.6 ...","title":"dmenv show:deps"}]}